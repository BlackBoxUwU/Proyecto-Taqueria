@page "/baja"
@using Proyecto_Taqueria.Data.Modelos
@using Proyecto_Taqueria.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Contexto
@rendermode InteractiveServer

<div class="contenedor-principal">
    <div class="contenedor-formulario">
        <h3 class="titulo-pagina">Baja de Producto</h3>

        <div class="form-group row">
            <label for="buscarProducto" class="col-md-3 col-form-label">Buscar Producto:</label>
            <div class="col-md-9">
                <div class="input-group">
                    <InputText id="buscarProducto" @bind-Value="terminoBusqueda"
                               class="form-control" placeholder="ID o Nombre del producto" />
                    <button class="btn btn-primary" type="button" @onclick="BuscarProductos">
                        Buscar
                    </button>
                </div>
                <small class="text-muted">Ingrese el ID o nombre del producto a eliminar</small>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensajeFeedback))
        {
            <div class="alert @mensajeCssClass mt-4" role="alert">
                @mensajeFeedback
            </div>
        }

        @if (productosEncontrados != null && productosEncontrados.Any())
        {
            <h4 class="titulo-pagina mt-5">Resultados de la Búsqueda</h4>

            <div class="table-responsive">
                <table class="table table-hover table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Categoría</th>
                            <th>Stock</th>
                            <th>Fecha Caducidad</th>
                            <th>Fecha Llegada</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in productosEncontrados)
                        {
                            <tr>
                                <td>@producto.Id</td>
                                <td>@producto.Nombre</td>
                                <td>@producto.Categoria</td>
                                <td>@producto.CantidadStock</td>
                                <td>@(producto.FechaCaducidad?.ToShortDateString() ?? "N/A")</td>
                                <td>@(producto.FechaLlegada?.ToShortDateString() ?? "N/A")</td>
                                <td class="text-center">
                                    <button class="btn btn-danger btn-sm"
                                            @onclick="() => ConfirmarEliminacion(producto)">
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (!string.IsNullOrEmpty(terminoBusqueda) && productosEncontrados != null && !productosEncontrados.Any())
        {
            <div class="alert alert-info mt-4" role="alert">
                No se encontraron productos que coincidan con "@terminoBusqueda".
            </div>
        }

        @if (mostrarConfirmacion && productoAEliminar != null)
        {
            <div class="alert alert-warning mt-4">
                <h5>Confirmar Eliminación</h5>
                <p>¿Estás seguro de que deseas eliminar el producto <strong>@productoAEliminar.Nombre</strong> (ID: @productoAEliminar.Id)?</p>
                <p class="text-danger">Esta acción no se puede deshacer.</p>
                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-danger" @onclick="EliminarProducto">
                        Sí, Eliminar
                    </button>
                    <button class="btn btn-secondary" @onclick="CancelarEliminacion">
                        Cancelar
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string terminoBusqueda = string.Empty;
    private List<Producto>? productosEncontrados;
    private Producto? productoAEliminar;
    private string mensajeFeedback = string.Empty;
    private string mensajeCssClass = string.Empty;
    private bool mostrarConfirmacion = false;

    private async Task BuscarProductos()
    {
        mensajeFeedback = string.Empty;
        mensajeCssClass = string.Empty;
        productosEncontrados = null;
        productoAEliminar = null;
        mostrarConfirmacion = false;

        try
        {
            List<Producto> resultados = new List<Producto>();

            // Intentar buscar por ID primero
            if (int.TryParse(terminoBusqueda, out int idBusqueda))
            {
                var productoPorId = await Contexto.Productos.FirstOrDefaultAsync(p => p.Id == idBusqueda);
                if (productoPorId != null)
                {
                    resultados.Add(productoPorId);
                }
            }

            // Si no se encontraron resultados por ID, o si el término no era un número,
            // buscar por nombre. La idea es mostrar TODOS los que coincidan.
            if (!string.IsNullOrWhiteSpace(terminoBusqueda))
            {
                var productosPorNombre = await Contexto.Productos
                    .Where(p => p.Nombre.ToLower().Contains(terminoBusqueda.ToLower()))
                    .ToListAsync();

                foreach (var prod in productosPorNombre)
                {
                    if (!resultados.Any(r => r.Id == prod.Id))
                    {
                        resultados.Add(prod);
                    }
                }
            }

            if (!resultados.Any())
            {
                mensajeFeedback = "No se encontraron productos que coincidan con su búsqueda.";
                mensajeCssClass = "alert alert-warning";
            }
            else
            {
                // CAMBIO: Ordenar por ID en orden descendente para que el más reciente aparezca arriba
                productosEncontrados = resultados.OrderByDescending(p => p.Id).ToList();
                mensajeFeedback = $"Se encontraron {productosEncontrados.Count} producto(s).";
                mensajeCssClass = "alert alert-info";
            }
        }
        catch (Exception ex)
        {
            mensajeFeedback = $"Error al buscar productos: {ex.Message}";
            mensajeCssClass = "alert alert-danger";
            Console.WriteLine($"Error al buscar: {ex.Message}");
        }
    }

    private void ConfirmarEliminacion(Producto producto)
    {
        productoAEliminar = producto;
        mostrarConfirmacion = true;
        mensajeFeedback = string.Empty;
    }

    private async Task EliminarProducto()
    {
        if (productoAEliminar == null)
        {
            mensajeFeedback = "No hay producto seleccionado para eliminar.";
            mensajeCssClass = "alert alert-danger";
            mostrarConfirmacion = false;
            return;
        }

        try
        {
            Contexto.Productos.Remove(productoAEliminar);
            await Contexto.SaveChangesAsync();

            mensajeFeedback = $"Producto '{productoAEliminar.Nombre}' (ID: {productoAEliminar.Id}) eliminado correctamente.";
            mensajeCssClass = "alert alert-success";

            productoAEliminar = null;
            mostrarConfirmacion = false;
            await BuscarProductos(); // Volver a buscar para actualizar la lista mostrada

            if (productosEncontrados == null || !productosEncontrados.Any())
            {
                terminoBusqueda = string.Empty;
            }
        }
        catch (Exception ex)
        {
            mensajeFeedback = $"Error al eliminar el producto: {ex.Message}";
            mensajeCssClass = "alert alert-danger";
            Console.WriteLine($"Error al eliminar: {ex.Message}");
        }
    }

    private void CancelarEliminacion()
    {
        mostrarConfirmacion = false;
        productoAEliminar = null;
        mensajeFeedback = "Eliminación cancelada.";
        mensajeCssClass = "alert alert-info";
    }
}